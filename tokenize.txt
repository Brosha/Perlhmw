use 5.010;
use strict;
use warnings;
use diagnostics;
BEGIN{
	if ($] < 5.018) {
		package experimental;
		use warnings::register;
	}
}
no warnings 'experimental';

sub tokenize {
	chomp(my $expr = shift);
	my @res;
        my $p=0;
        my @resstring;
        my @resstring1;
        my $flag=0; 
        my @chars=split //, $expr;
        for my $c( @chars) {
               next if $c =~ /^\s*$/;
               given ($c){
                       when (/^\s*$/) {}
                       when (/\d/) { $res[p]=$c; $i++; $flag=1; }  # åñëè çíà÷åíèå íå ïîìåíÿåòñÿ ó ôëàãà, òî íå íàéäåíî ÷èñëî, ïîýòîìó óìð¸ì.
                       when (['.', '-', '*', '/', '+', 'e', '^', '(', ')']) {$res[p]=$c;$p++;}
                          
                       default {
                        die "Bad : '$_', NaN";
                               }
                           }
        if ($flag=0){
         die "Bad : '$_' , No nubmers"; } 
       
        if (($res[0]=='.')&&($res[1]=='e'){
                       die "Bad : '$_', NaN"; 
                                          }
        given ($res[0]){ 
                         when (['.', '*', '/', 'e', '^',  ')']) {die "Bad : '$_', NaN";}
                         defeault {}

         @resstring=('.', '-', '*', '/', '+', 'e', '^'); # äîëæíî áûòü äîñòàòî÷íî äâóõ ïîñëåäîâàòåëüíî íåïðàâèëüíî ðàñïîëîæåííûõ ñèìâîëîâ, ïîýòîìó çàâ¸ë äëÿ ñðàâíåíèÿ äâà ìàññèâà, à äàëüøå æóòêîå ñðàâíåíèå. sad, but true
        @resstring1=( '*', '/', '+', 'e', '^',')');
      
        my $l=0;
        for (my $i=0; i<p-1; i++) {

           
              if ($res[i]=='(') {                      
                     $l++                                     # òóò ïðîâåðÿåì ïðàâèëüíîñòü ñêîáîê.
                                }
              elsif( $res[i]==')') {
                          $l--     }
              if ($l<0) {
              die "Bad : '$_' , ñêîáêè íå ïðàâèëüíî ðàññòàâëåíû";           
                        }
         if ($l>0) {
              die "Bad : '$_' , ñêîáêè íå ïðàâèëüíî ðàññòàâëåíû";           
                        }
            
                              
            
                             
                 
           if ( ($res[i+1]=='.')&&(($res[i]=='.')||($res[i]=='e'))||($res[i]=='(') && (($res[i+1]=='e')||($res[i+1]=='*')||($res[i+1]=='/')||($res[i+1]=='^')||($res[i+1]==')') )|| ($res[i+1]=='-')&&($res[i`]=='-')&&($res[i+2]!=/\d/)){

            die "Bad : '$_' , NaN";}

          
           if (($res[i]!=/\d/) && ($res[i+1]!=/\d/)) {
              for my $c(@resstring) {
                  for my $d (@resstring1){
                    if (($res[i]!=$c) && ($res[i+1]!=$d)){        # èñïîëüçóÿ ìàññèâû ñðàâíèâàåì äâà ïîñëåäîâàòåëüíûõ ñèìâîëà
                       die "Bad : '$_' , NaN"; 
                                                         }
                                      }  
                                                     }
                                   }
        

                                        
        for (my $i=1; i<p-2; i++) { 
            if (($res[i]=='.')&&($res[i+1]=='e')&&($res[i]!)&&($res[i+2]!=/\d/)&&($res[i-1]!=/\d/)){  # ïðîâåðÿåì íà ïðàâèëüíîñòü ÷èñåë ñ e.
                        die "Bad : '$_' , NaN"; }
             

                                                  
  
         
        
            

                

                              

	# ...

	return \@res;
}

1;
